#!/usr/bin/env python3
"""
Find TODO and FIXME comments in the codebase and create GitHub issues.

This script scans all Python and Go files for TODO/FIXME comments and
creates GitHub issues for them, avoiding duplicates.

Usage:
    python scripts/find_tasks.py --repo owner/repo --token $GITHUB_TOKEN
"""

import os
import re
import sys
from pathlib import Path
from typing import List, Tuple

import click
from github import Github, GithubException, Auth


def find_todos_in_file(file_path: Path) -> List[Tuple[int, str, str]]:
    """
    Find TODO and FIXME comments in a file.
    
    Args:
        file_path: Path to the file to scan
        
    Returns:
        List of tuples: (line_number, comment_type, comment_text)
    """
    todos = []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, start=1):
                # Match TODO or FIXME comments (case insensitive)
                match = re.search(r'(TODO|FIXME)[\s:]+(.+)', line, re.IGNORECASE)
                if match:
                    comment_type = match.group(1).upper()
                    comment_text = match.group(2).strip()
                    todos.append((line_num, comment_type, comment_text))
    except (UnicodeDecodeError, PermissionError) as e:
        print(f"Warning: Could not read {file_path}: {e}", file=sys.stderr)
    
    return todos


def find_all_todos(root_path: Path) -> List[Tuple[Path, int, str, str]]:
    """
    Find all TODO and FIXME comments in Python and Go files.
    
    Args:
        root_path: Root directory to scan
        
    Returns:
        List of tuples: (file_path, line_number, comment_type, comment_text)
    """
    all_todos = []
    
    # Find all Python and Go files
    for pattern in ['**/*.py', '**/*.go']:
        for file_path in root_path.glob(pattern):
            # Skip virtual environments and common ignore directories
            if any(part in file_path.parts for part in ['.venv', 'venv', '__pycache__', '.git', 'node_modules']):
                continue
            
            todos = find_todos_in_file(file_path)
            for line_num, comment_type, comment_text in todos:
                all_todos.append((file_path, line_num, comment_type, comment_text))
    
    return all_todos


def get_existing_issue_titles(repo) -> set:
    """
    Get titles of existing issues with the 'generated-task' label.
    
    Args:
        repo: GitHub repository object
        
    Returns:
        Set of existing issue titles
    """
    existing_titles = set()
    try:
        issues = repo.get_issues(state='all', labels=['generated-task'])
        for issue in issues:
            existing_titles.add(issue.title)
    except Exception:
        # Silently fail - we'll just create issues without duplicate checking
        pass
    
    return existing_titles


def create_issue_title(file_path: Path, line_num: int, comment_type: str, root_path: Path) -> str:
    """
    Create a standardized issue title.
    
    Args:
        file_path: Path to the file
        line_num: Line number of the comment
        comment_type: TODO or FIXME
        root_path: Repository root path
        
    Returns:
        Issue title string
    """
    relative_path = file_path.relative_to(root_path)
    return f"Fix {comment_type} in {relative_path} line {line_num}"


def create_issue_body(file_path: Path, line_num: int, comment_text: str, root_path: Path) -> str:
    """
    Create the issue body text.
    
    Args:
        file_path: Path to the file
        line_num: Line number of the comment
        comment_text: The comment text
        root_path: Repository root path
        
    Returns:
        Issue body string
    """
    relative_path = file_path.relative_to(root_path)
    return f"""Found TODO/FIXME comment:

**File:** `{relative_path}`  
**Line:** {line_num}  
**Comment:** {comment_text}

---
*This issue was automatically generated by the task discovery system.*
"""


def create_github_issues(todos: List[Tuple[Path, int, str, str]], repo_name: str, token: str, root_path: Path, max_issues: int = 5) -> int:
    """
    Create GitHub issues for TODO/FIXME comments.
    
    Args:
        todos: List of todos to create issues for
        repo_name: Repository name (owner/repo)
        token: GitHub token
        root_path: Repository root path
        max_issues: Maximum number of issues to create
        
    Returns:
        Number of issues created
    """
    if not todos:
        print("No TODO or FIXME comments found.")
        return 0
    
    try:
        auth = Auth.Token(token)
        g = Github(auth=auth)
        repo = g.get_repo(repo_name)
    except Exception:
        print(f"Error: Could not access repository {repo_name}. Check your token and repository name.", file=sys.stderr)
        return 0
    
    # Get existing issue titles to avoid duplicates
    existing_titles = get_existing_issue_titles(repo)
    
    created_count = 0
    for file_path, line_num, comment_type, comment_text in todos:
        if created_count >= max_issues:
            print(f"\nReached maximum of {max_issues} issues. Stopping.")
            break
        
        title = create_issue_title(file_path, line_num, comment_type, root_path)
        
        # Skip if issue already exists
        if title in existing_titles:
            print(f"Skipping (already exists): {title}")
            continue
        
        body = create_issue_body(file_path, line_num, comment_text, root_path)
        
        try:
            issue = repo.create_issue(
                title=title,
                body=body,
                labels=['generated-task']
            )
            created_count += 1
            print(f"Created issue #{issue.number}: {title}")
        except GithubException as e:
            print(f"Error creating issue '{title}': {e}", file=sys.stderr)
    
    return created_count


@click.command()
@click.option(
    '--repo',
    required=True,
    help='Repository name in format owner/repo'
)
@click.option(
    '--token',
    envvar='GITHUB_TOKEN',
    required=True,
    help='GitHub token (can also be set via GITHUB_TOKEN env var)'
)
@click.option(
    '--root',
    type=click.Path(exists=True, path_type=Path),
    default='.',
    help='Root directory to scan (default: current directory)'
)
@click.option(
    '--max-issues',
    type=int,
    default=5,
    help='Maximum number of issues to create (default: 5)'
)
def main(repo: str, token: str, root: Path, max_issues: int) -> None:
    """
    Find TODO and FIXME comments and create GitHub issues.
    
    Scans all Python and Go files in the repository for TODO and FIXME
    comments and creates GitHub issues for each one found, up to a maximum
    of 5 issues per run.
    """
    root_path = root.resolve()
    print(f"Scanning repository at: {root_path}")
    print(f"Target repository: {repo}")
    print(f"Maximum issues to create: {max_issues}\n")
    
    # Find all TODOs and FIXMEs
    todos = find_all_todos(root_path)
    print(f"Found {len(todos)} TODO/FIXME comments\n")
    
    if not todos:
        print("No tasks to create issues for.")
        return
    
    # Create GitHub issues
    created_count = create_github_issues(todos, repo, token, root_path, max_issues)
    
    print(f"\nâœ“ Successfully created {created_count} issue(s)")


if __name__ == '__main__':
    main()
